; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.21005.1 

	TITLE	C:\cpp\tetrGDIP\tetr.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?mas_pr@@3PAY0L@HA				; mas_pr
PUBLIC	?mas_preview@@3PAY0L@HA				; mas_preview
PUBLIC	?fig_next@@3PAY03HA				; fig_next
PUBLIC	?fl_s@@3HA					; fl_s
PUBLIC	?hc@@3HA					; hc
PUBLIC	?vaj_mem_2@@3HA					; vaj_mem_2
PUBLIC	?total@@3HA					; total
PUBLIC	?max_total_norm@@3HA				; max_total_norm
PUBLIC	?max_total_adv@@3HA				; max_total_adv
PUBLIC	?pause@@3HA					; pause
PUBLIC	?etap@@3HA					; etap
PUBLIC	?takt@@3KA					; takt
PUBLIC	?prsc@@3KA					; prsc
PUBLIC	?sopli@@3PAHA					; sopli
PUBLIC	?f_sop@@3HA					; f_sop
PUBLIC	?f_sop_ver@@3HA					; f_sop_ver
PUBLIC	?ready@@3HA					; ready
PUBLIC	?f_next_level@@3HA				; f_next_level
PUBLIC	?mas_rab@@3PAY0O@HA				; mas_rab
PUBLIC	?fig_tec@@3PAY03HA				; fig_tec
PUBLIC	?fig_b@@3PAY03HA				; fig_b
PUBLIC	?x@@3HA						; x
PUBLIC	?y@@3HA						; y
PUBLIC	?fig_t@@3HA					; fig_t
PUBLIC	?fig_p@@3HA					; fig_p
PUBLIC	?fig_t_n@@3HA					; fig_t_n
PUBLIC	?fig_p_n@@3HA					; fig_p_n
PUBLIC	?fig_c@@3HA					; fig_c
PUBLIC	?fig_c_n@@3HA					; fig_c_n
PUBLIC	?vaj@@3HA					; vaj
PUBLIC	?vaj_mem@@3HA					; vaj_mem
_BSS	SEGMENT
?mas_pr@@3PAY0L@HA DD 0f2H DUP (?)			; mas_pr
?fig_next@@3PAY03HA DD 010H DUP (?)			; fig_next
?fl_s@@3HA DD	01H DUP (?)				; fl_s
?hc@@3HA DD	01H DUP (?)				; hc
?vaj_mem_2@@3HA DD 01H DUP (?)				; vaj_mem_2
?total@@3HA DD	01H DUP (?)				; total
?max_total_norm@@3HA DD 01H DUP (?)			; max_total_norm
?max_total_adv@@3HA DD 01H DUP (?)			; max_total_adv
?pause@@3HA DD	01H DUP (?)				; pause
?etap@@3HA DD	01H DUP (?)				; etap
?takt@@3KA DD	01H DUP (?)				; takt
?prsc@@3KA DD	01H DUP (?)				; prsc
?sopli@@3PAHA DD 016H DUP (?)				; sopli
?f_sop@@3HA DD	01H DUP (?)				; f_sop
?f_sop_ver@@3HA DD 01H DUP (?)				; f_sop_ver
?ready@@3HA DD	01H DUP (?)				; ready
?f_next_level@@3HA DD 01H DUP (?)			; f_next_level
?mas_rab@@3PAY0O@HA DD 015eH DUP (?)			; mas_rab
?fig_tec@@3PAY03HA DD 010H DUP (?)			; fig_tec
?fig_b@@3PAY03HA DD 010H DUP (?)			; fig_b
?x@@3HA	DD	01H DUP (?)				; x
?y@@3HA	DD	01H DUP (?)				; y
?fig_t@@3HA DD	01H DUP (?)				; fig_t
?fig_p@@3HA DD	01H DUP (?)				; fig_p
?fig_t_n@@3HA DD 01H DUP (?)				; fig_t_n
?fig_p_n@@3HA DD 01H DUP (?)				; fig_p_n
?fig_c@@3HA DD	01H DUP (?)				; fig_c
?fig_c_n@@3HA DD 01H DUP (?)				; fig_c_n
?vaj@@3HA DD	01H DUP (?)				; vaj
?vaj_mem@@3HA DD 01H DUP (?)				; vaj_mem
_BSS	ENDS
CONST	SEGMENT
_f	DD	01H
	DD	01H
	DD	00H
	DD	00H
	DD	01H
	DD	01H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	00H
	DD	00H
	DD	01H
	DD	01H
	DD	01H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	01H
	DD	01H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	01H
	DD	01H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	01H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	01H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	01H
	DD	00H
	DD	01H
	DD	01H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
CONST	ENDS
_DATA	SEGMENT
?mas_preview@@3PAY0L@HA DD 00H				; mas_preview
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	01H
	DD	00H
	DD	00H
	DD	03H
	DD	00H
	DD	00H
	DD	00H
	DD	02H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	00H
	DD	00H
	DD	03H
	DD	00H
	DD	00H
	DD	00H
	DD	02H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	00H
	DD	00H
	DD	03H
	DD	00H
	DD	00H
	DD	02H
	DD	02H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	03H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	01H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	01H
	DD	00H
	DD	00H
	DD	00H
	DD	05H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	05H
	DD	05H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	05H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	07H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	07H
	DD	07H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	07H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	04H
	DD	04H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	04H
	DD	04H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	02H
	DD	00H
	DD	00H
	DD	00H
	DD	06H
	DD	06H
	DD	06H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	02H
	DD	00H
	DD	00H
	DD	00H
	DD	06H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	02H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	02H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_DATA	ENDS
PUBLIC	?loop@@YAHHH@Z					; loop
PUBLIC	?setup_00@@YAXXZ				; setup_00
PUBLIC	?setup_0@@YAXH@Z				; setup_0
PUBLIC	?setup_1@@YAXH@Z				; setup_1
PUBLIC	?setup_2@@YAXH@Z				; setup_2
PUBLIC	?setup_3@@YAXXZ					; setup_3
PUBLIC	?rot@@YAXH@Z					; rot
PUBLIC	?prov_lin@@YAHXZ				; prov_lin
PUBLIC	?prov_krok@@YAHHH@Z				; prov_krok
PUBLIC	?prov_rot@@YAHH@Z				; prov_rot
PUBLIC	?prnt_podg@@YAXH@Z				; prnt_podg
PUBLIC	?gen_vaj@@YAXXZ					; gen_vaj
PUBLIC	?gen@@YAXH@Z					; gen
EXTRN	__time64:PROC
EXTRN	_rand:PROC
EXTRN	_srand:PROC
; Function compile flags: /Odtp
_TEXT	SEGMENT
_mem$1 = -16						; size = 8
_j$ = -8						; size = 4
_i$ = -4						; size = 4
_prnt$ = 8						; size = 4
?gen@@YAXH@Z PROC					; gen
; File c:\cpp\tetrgdip\tetr.cpp
; Line 112
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
; Line 114
	mov	DWORD PTR ?x@@3HA, 2			; x
; Line 115
	mov	DWORD PTR ?y@@3HA, 6			; y
; Line 116
	mov	eax, DWORD PTR ?fig_t_n@@3HA		; fig_t_n
	mov	DWORD PTR ?fig_t@@3HA, eax		; fig_t
; Line 117
	mov	ecx, DWORD PTR ?fig_p_n@@3HA		; fig_p_n
	mov	DWORD PTR ?fig_p@@3HA, ecx		; fig_p
; Line 118
	mov	edx, DWORD PTR ?fig_c_n@@3HA		; fig_c_n
	mov	DWORD PTR ?fig_c@@3HA, edx		; fig_c
; Line 119
	call	_rand
	cdq
	mov	ecx, 7
	idiv	ecx
	mov	DWORD PTR ?fig_t_n@@3HA, edx		; fig_t_n
; Line 120
	call	_rand
	and	eax, -2147483645			; 80000003H
	jns	SHORT $LN18@gen
	dec	eax
	or	eax, -4					; fffffffcH
	inc	eax
$LN18@gen:
	mov	DWORD PTR ?fig_p_n@@3HA, eax		; fig_p_n
; Line 121
	call	_rand
	cdq
	mov	ecx, 7
	idiv	ecx
	add	edx, 1
	mov	DWORD PTR ?fig_c_n@@3HA, edx		; fig_c_n
; Line 122
	mov	edx, 1
	test	edx, edx
	je	$LN15@gen
; Line 123
	mov	eax, DWORD PTR ?fig_t@@3HA		; fig_t
	mov	DWORD PTR _mem$1[ebp], eax
	mov	ecx, DWORD PTR ?fig_c@@3HA		; fig_c
	mov	DWORD PTR _mem$1[ebp+4], ecx
; Line 124
	mov	edx, DWORD PTR ?fig_t_n@@3HA		; fig_t_n
	mov	DWORD PTR ?fig_t@@3HA, edx		; fig_t
; Line 125
	mov	eax, DWORD PTR ?fig_c_n@@3HA		; fig_c_n
	mov	DWORD PTR ?fig_c@@3HA, eax		; fig_c
; Line 126
	mov	ecx, DWORD PTR ?fig_p_n@@3HA		; fig_p_n
	push	ecx
	call	?rot@@YAXH@Z				; rot
	add	esp, 4
; Line 127
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN14@gen
$LN13@gen:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN14@gen:
	cmp	DWORD PTR _i$[ebp], 4
	jge	SHORT $LN12@gen
; Line 128
	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN11@gen
$LN10@gen:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN11@gen:
	cmp	DWORD PTR _j$[ebp], 4
	jge	SHORT $LN9@gen
; Line 129
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 4
	mov	edx, DWORD PTR _i$[ebp]
	shl	edx, 4
	mov	eax, DWORD PTR _j$[ebp]
	mov	esi, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR ?fig_b@@3PAY03HA[ecx+esi*4]
	mov	DWORD PTR ?fig_next@@3PAY03HA[edx+eax*4], ecx
	jmp	SHORT $LN10@gen
$LN9@gen:
; Line 130
	jmp	SHORT $LN13@gen
$LN12@gen:
; Line 131
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _mem$1[ebp+eax]
	mov	DWORD PTR ?fig_t@@3HA, ecx		; fig_t
; Line 132
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _mem$1[ebp+edx]
	mov	DWORD PTR ?fig_c@@3HA, eax		; fig_c
; Line 133
	mov	ecx, DWORD PTR ?fig_p@@3HA		; fig_p
	push	ecx
	call	?rot@@YAXH@Z				; rot
	add	esp, 4
; Line 134
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN8@gen
$LN7@gen:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN8@gen:
	cmp	DWORD PTR _i$[ebp], 4
	jge	SHORT $LN6@gen
; Line 135
	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN5@gen
$LN4@gen:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN5@gen:
	cmp	DWORD PTR _j$[ebp], 4
	jge	SHORT $LN3@gen
; Line 136
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 4
	mov	edx, DWORD PTR _i$[ebp]
	shl	edx, 4
	mov	eax, DWORD PTR _j$[ebp]
	mov	esi, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR ?fig_b@@3PAY03HA[ecx+esi*4]
	mov	DWORD PTR ?fig_tec@@3PAY03HA[edx+eax*4], ecx
	jmp	SHORT $LN4@gen
$LN3@gen:
	jmp	SHORT $LN7@gen
$LN6@gen:
; Line 137
	mov	edx, 16					; 00000010H
	imul	eax, edx, 0
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	ecx, 16					; 00000010H
	imul	ecx, ecx, 0
	mov	esi, 4
	shl	esi, 0
	mov	edx, DWORD PTR ?fig_tec@@3PAY03HA[eax+edx]
	add	edx, DWORD PTR ?fig_tec@@3PAY03HA[ecx+esi]
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	mov	eax, 4
	shl	eax, 1
	add	edx, DWORD PTR ?fig_tec@@3PAY03HA[ecx+eax]
	mov	ecx, 16					; 00000010H
	imul	eax, ecx, 0
	mov	ecx, 4
	imul	ecx, ecx, 3
	add	edx, DWORD PTR ?fig_tec@@3PAY03HA[eax+ecx]
	jne	SHORT $LN15@gen
; Line 138
	mov	edx, DWORD PTR ?x@@3HA			; x
	sub	edx, 1
	mov	DWORD PTR ?x@@3HA, edx			; x
$LN15@gen:
; Line 140
	cmp	DWORD PTR _prnt$[ebp], 0
	je	SHORT $LN16@gen
; Line 141
	mov	eax, DWORD PTR ?total@@3HA		; total
	add	eax, 1
	mov	DWORD PTR ?total@@3HA, eax		; total
$LN16@gen:
; Line 142
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
?gen@@YAXH@Z ENDP					; gen
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv139 = -28						; size = 4
tv78 = -24						; size = 4
_i$1 = -20						; size = 4
_i$2 = -16						; size = 4
_i$3 = -12						; size = 4
_i$4 = -8						; size = 4
_j$5 = -4						; size = 4
?gen_vaj@@YAXXZ PROC					; gen_vaj
; File c:\cpp\tetrgdip\tetr.cpp
; Line 146
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
; Line 147
	mov	eax, DWORD PTR ?vaj_mem_2@@3HA		; vaj_mem_2
	cmp	eax, DWORD PTR ?vaj_mem@@3HA		; vaj_mem
	jle	$LN23@gen_vaj
; Line 148
	mov	DWORD PTR _j$5[ebp], 1
; Line 149
	jmp	SHORT $LN22@gen_vaj
$LN21@gen_vaj:
	mov	ecx, DWORD PTR _j$5[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$5[ebp], ecx
$LN22@gen_vaj:
	mov	edx, DWORD PTR _j$5[ebp]
	cmp	edx, DWORD PTR ?vaj_mem_2@@3HA		; vaj_mem_2
	jg	SHORT $LN20@gen_vaj
; Line 150
	mov	DWORD PTR _i$4[ebp], 1
	jmp	SHORT $LN19@gen_vaj
$LN18@gen_vaj:
	mov	eax, DWORD PTR _i$4[ebp]
	add	eax, 1
	mov	DWORD PTR _i$4[ebp], eax
$LN19@gen_vaj:
	cmp	DWORD PTR _i$4[ebp], 11			; 0000000bH
	jg	SHORT $LN17@gen_vaj
; Line 151
	call	_rand
	cdq
	mov	ecx, 3
	idiv	ecx
	test	edx, edx
	je	SHORT $LN26@gen_vaj
	mov	DWORD PTR tv78[ebp], 0
	jmp	SHORT $LN27@gen_vaj
$LN26@gen_vaj:
	mov	DWORD PTR tv78[ebp], 1
$LN27@gen_vaj:
	call	_rand
	cdq
	mov	ecx, 7
	idiv	ecx
	add	edx, 1
	imul	edx, DWORD PTR tv78[ebp]
	mov	eax, 22					; 00000016H
	sub	eax, DWORD PTR _j$5[ebp]
	add	eax, 1
	imul	ecx, eax, 56
	mov	eax, DWORD PTR _i$4[ebp]
	mov	DWORD PTR ?mas_rab@@3PAY0O@HA[ecx+eax*4], edx
	jmp	SHORT $LN18@gen_vaj
$LN17@gen_vaj:
	jmp	SHORT $LN21@gen_vaj
$LN20@gen_vaj:
; Line 152
	mov	ecx, DWORD PTR ?vaj_mem_2@@3HA		; vaj_mem_2
	mov	DWORD PTR ?vaj_mem@@3HA, ecx		; vaj_mem
	mov	edx, DWORD PTR ?vaj_mem@@3HA		; vaj_mem
	mov	DWORD PTR ?vaj@@3HA, edx		; vaj
; Line 153
	jmp	SHORT $LN16@gen_vaj
$LN15@gen_vaj:
	mov	eax, DWORD PTR _j$5[ebp]
	add	eax, 1
	mov	DWORD PTR _j$5[ebp], eax
$LN16@gen_vaj:
	mov	ecx, 22					; 00000016H
	sub	ecx, DWORD PTR _j$5[ebp]
	js	SHORT $LN14@gen_vaj
; Line 154
	mov	DWORD PTR _i$3[ebp], 1
	jmp	SHORT $LN13@gen_vaj
$LN12@gen_vaj:
	mov	edx, DWORD PTR _i$3[ebp]
	add	edx, 1
	mov	DWORD PTR _i$3[ebp], edx
$LN13@gen_vaj:
	cmp	DWORD PTR _i$3[ebp], 11			; 0000000bH
	jg	SHORT $LN11@gen_vaj
; Line 155
	mov	eax, 22					; 00000016H
	sub	eax, DWORD PTR _j$5[ebp]
	add	eax, 1
	imul	ecx, eax, 56
	mov	edx, DWORD PTR _i$3[ebp]
	mov	DWORD PTR ?mas_rab@@3PAY0O@HA[ecx+edx*4], 0
	jmp	SHORT $LN12@gen_vaj
$LN11@gen_vaj:
	jmp	SHORT $LN15@gen_vaj
$LN14@gen_vaj:
; Line 157
	jmp	$LN24@gen_vaj
$LN23@gen_vaj:
	mov	eax, DWORD PTR ?vaj_mem@@3HA		; vaj_mem
	cmp	eax, DWORD PTR ?vaj@@3HA		; vaj
	je	$LN24@gen_vaj
; Line 158
	mov	ecx, DWORD PTR ?vaj@@3HA		; vaj
	cmp	ecx, DWORD PTR ?vaj_mem@@3HA		; vaj_mem
	jle	SHORT $LN8@gen_vaj
; Line 159
	mov	DWORD PTR _i$2[ebp], 1
	jmp	SHORT $LN7@gen_vaj
$LN6@gen_vaj:
	mov	edx, DWORD PTR _i$2[ebp]
	add	edx, 1
	mov	DWORD PTR _i$2[ebp], edx
$LN7@gen_vaj:
	cmp	DWORD PTR _i$2[ebp], 11			; 0000000bH
	jg	SHORT $LN5@gen_vaj
; Line 160
	call	_rand
	cdq
	mov	ecx, 3
	idiv	ecx
	test	edx, edx
	je	SHORT $LN28@gen_vaj
	mov	DWORD PTR tv139[ebp], 0
	jmp	SHORT $LN29@gen_vaj
$LN28@gen_vaj:
	mov	DWORD PTR tv139[ebp], 1
$LN29@gen_vaj:
	call	_rand
	cdq
	mov	ecx, 7
	idiv	ecx
	add	edx, 1
	imul	edx, DWORD PTR tv139[ebp]
	mov	eax, 22					; 00000016H
	sub	eax, DWORD PTR ?vaj@@3HA		; vaj
	add	eax, 1
	imul	ecx, eax, 56
	mov	eax, DWORD PTR _i$2[ebp]
	mov	DWORD PTR ?mas_rab@@3PAY0O@HA[ecx+eax*4], edx
; Line 161
	jmp	SHORT $LN6@gen_vaj
$LN5@gen_vaj:
	jmp	SHORT $LN4@gen_vaj
$LN8@gen_vaj:
; Line 163
	mov	DWORD PTR _i$1[ebp], 1
	jmp	SHORT $LN3@gen_vaj
$LN2@gen_vaj:
	mov	ecx, DWORD PTR _i$1[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$1[ebp], ecx
$LN3@gen_vaj:
	cmp	DWORD PTR _i$1[ebp], 11			; 0000000bH
	jg	SHORT $LN4@gen_vaj
; Line 164
	mov	edx, 22					; 00000016H
	sub	edx, DWORD PTR ?vaj@@3HA		; vaj
	imul	eax, edx, 56
	mov	ecx, DWORD PTR _i$1[ebp]
	mov	DWORD PTR ?mas_rab@@3PAY0O@HA[eax+ecx*4], 0
; Line 165
	jmp	SHORT $LN2@gen_vaj
$LN4@gen_vaj:
; Line 166
	mov	edx, DWORD PTR ?vaj@@3HA		; vaj
	mov	DWORD PTR ?vaj_mem@@3HA, edx		; vaj_mem
	mov	eax, DWORD PTR ?vaj_mem@@3HA		; vaj_mem
	mov	DWORD PTR ?vaj_mem_2@@3HA, eax		; vaj_mem_2
$LN24@gen_vaj:
; Line 168
	mov	esp, ebp
	pop	ebp
	ret	0
?gen_vaj@@YAXXZ ENDP					; gen_vaj
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv146 = -12						; size = 4
_j$ = -8						; size = 4
_i$ = -4						; size = 4
_ff$ = 8						; size = 4
?prnt_podg@@YAXH@Z PROC					; prnt_podg
; File c:\cpp\tetrgdip\tetr.cpp
; Line 404
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
; Line 406
	mov	DWORD PTR _i$[ebp], 1
	jmp	SHORT $LN7@prnt_podg
$LN6@prnt_podg:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN7@prnt_podg:
	cmp	DWORD PTR _i$[ebp], 23			; 00000017H
	jge	$LN8@prnt_podg
; Line 407
	mov	DWORD PTR _j$[ebp], 1
	jmp	SHORT $LN4@prnt_podg
$LN3@prnt_podg:
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx
$LN4@prnt_podg:
	cmp	DWORD PTR _j$[ebp], 12			; 0000000cH
	jge	$LN2@prnt_podg
; Line 408
	imul	edx, DWORD PTR _i$[ebp], 56
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	imul	ecx, eax, 44
	mov	eax, DWORD PTR _j$[ebp]
	mov	esi, DWORD PTR _j$[ebp]
	mov	edx, DWORD PTR ?mas_rab@@3PAY0O@HA[edx+esi*4]
	mov	DWORD PTR ?mas_pr@@3PAY0L@HA[ecx+eax*4-4], edx
; Line 409
	mov	eax, DWORD PTR ?x@@3HA			; x
	sub	eax, 1
	cmp	DWORD PTR _i$[ebp], eax
	jl	$LN1@prnt_podg
	mov	ecx, DWORD PTR ?x@@3HA			; x
	add	ecx, 2
	cmp	DWORD PTR _i$[ebp], ecx
	jg	$LN1@prnt_podg
	mov	edx, DWORD PTR ?y@@3HA			; y
	sub	edx, 1
	cmp	DWORD PTR _j$[ebp], edx
	jl	$LN1@prnt_podg
	mov	eax, DWORD PTR ?y@@3HA			; y
	add	eax, 2
	cmp	DWORD PTR _j$[ebp], eax
	jg	SHORT $LN1@prnt_podg
	cmp	DWORD PTR ?etap@@3HA, 3			; etap
	jl	SHORT $LN1@prnt_podg
; Line 410
	mov	ecx, DWORD PTR _i$[ebp]
	sub	ecx, DWORD PTR ?x@@3HA			; x
	add	ecx, 1
	shl	ecx, 4
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, DWORD PTR ?y@@3HA			; y
	cmp	DWORD PTR ?fig_tec@@3PAY03HA[ecx+edx*4+4], 0
	je	SHORT $LN10@prnt_podg
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, DWORD PTR ?x@@3HA			; x
	add	eax, 1
	shl	eax, 4
	mov	ecx, DWORD PTR _j$[ebp]
	sub	ecx, DWORD PTR ?y@@3HA			; y
	mov	edx, DWORD PTR ?fig_tec@@3PAY03HA[eax+ecx*4+4]
	mov	DWORD PTR tv146[ebp], edx
	jmp	SHORT $LN11@prnt_podg
$LN10@prnt_podg:
	imul	eax, DWORD PTR _i$[ebp], 56
	mov	ecx, DWORD PTR _j$[ebp]
	mov	edx, DWORD PTR ?mas_rab@@3PAY0O@HA[eax+ecx*4]
	mov	DWORD PTR tv146[ebp], edx
$LN11@prnt_podg:
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	imul	ecx, eax, 44
	mov	edx, DWORD PTR _j$[ebp]
	mov	eax, DWORD PTR tv146[ebp]
	mov	DWORD PTR ?mas_pr@@3PAY0L@HA[ecx+edx*4-4], eax
$LN1@prnt_podg:
; Line 411
	jmp	$LN3@prnt_podg
$LN2@prnt_podg:
	jmp	$LN6@prnt_podg
$LN8@prnt_podg:
; Line 412
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
?prnt_podg@@YAXH@Z ENDP					; prnt_podg
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_ff$ = -20						; size = 4
_jj$ = -16						; size = 4
_ii$ = -12						; size = 4
_i$ = -8						; size = 4
_j$ = -4						; size = 4
_new_fig_p$ = 8						; size = 4
?prov_rot@@YAHH@Z PROC					; prov_rot
; File c:\cpp\tetrgdip\tetr.cpp
; Line 328
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	push	esi
; Line 331
	mov	DWORD PTR _ff$[ebp], 0
; Line 332
	mov	eax, DWORD PTR _new_fig_p$[ebp]
	and	eax, -2147483645			; 80000003H
	jns	SHORT $LN76@prov_rot
	dec	eax
	or	eax, -4					; fffffffcH
	inc	eax
$LN76@prov_rot:
	push	eax
	call	?rot@@YAXH@Z				; rot
	add	esp, 4
; Line 333
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN73@prov_rot
$LN72@prov_rot:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN73@prov_rot:
	cmp	DWORD PTR _i$[ebp], 4
	jge	$LN71@prov_rot
; Line 334
	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN70@prov_rot
$LN69@prov_rot:
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
$LN70@prov_rot:
	cmp	DWORD PTR _j$[ebp], 4
	jge	$LN68@prov_rot
; Line 335
	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _j$[ebp]
	cmp	DWORD PTR ?fig_b@@3PAY03HA[eax+ecx*4], 0
	je	$LN67@prov_rot
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR ?x@@3HA			; x
	lea	ecx, DWORD PTR [eax+edx-1]
	imul	edx, ecx, 56
	mov	eax, DWORD PTR ?y@@3HA			; y
	add	eax, DWORD PTR _j$[ebp]
	cmp	DWORD PTR ?mas_rab@@3PAY0O@HA[edx+eax*4-4], 0
	je	$LN67@prov_rot
; Line 336
	cmp	DWORD PTR ?x@@3HA, 1			; x
	jne	SHORT $LN66@prov_rot
; Line 337
	mov	ecx, DWORD PTR ?x@@3HA			; x
	add	ecx, 1
	mov	DWORD PTR ?x@@3HA, ecx			; x
; Line 338
	mov	edx, DWORD PTR _new_fig_p$[ebp]
	push	edx
	call	?prov_rot@@YAHH@Z			; prov_rot
	add	esp, 4
	test	eax, eax
	je	SHORT $LN65@prov_rot
; Line 339
	mov	eax, 1
	jmp	$LN74@prov_rot
; Line 340
	jmp	SHORT $LN64@prov_rot
$LN65@prov_rot:
; Line 341
	mov	eax, DWORD PTR ?x@@3HA			; x
	sub	eax, 1
	mov	DWORD PTR ?x@@3HA, eax			; x
; Line 342
	xor	eax, eax
	jmp	$LN74@prov_rot
$LN64@prov_rot:
; Line 345
	jmp	$LN67@prov_rot
$LN66@prov_rot:
; Line 346
	cmp	DWORD PTR _j$[ebp], 0
	jne	$LN62@prov_rot
; Line 347
	mov	DWORD PTR _ii$[ebp], 0
	jmp	SHORT $LN61@prov_rot
$LN60@prov_rot:
	mov	ecx, DWORD PTR _ii$[ebp]
	add	ecx, 1
	mov	DWORD PTR _ii$[ebp], ecx
$LN61@prov_rot:
	cmp	DWORD PTR _ii$[ebp], 4
	jge	SHORT $LN59@prov_rot
; Line 348
	mov	DWORD PTR _jj$[ebp], 0
	jmp	SHORT $LN58@prov_rot
$LN57@prov_rot:
	mov	edx, DWORD PTR _jj$[ebp]
	add	edx, 1
	mov	DWORD PTR _jj$[ebp], edx
$LN58@prov_rot:
	cmp	DWORD PTR _jj$[ebp], 4
	jge	SHORT $LN56@prov_rot
; Line 349
	mov	eax, DWORD PTR _ii$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _jj$[ebp]
	cmp	DWORD PTR ?fig_b@@3PAY03HA[eax+ecx*4], 0
	je	SHORT $LN55@prov_rot
	mov	edx, DWORD PTR _ii$[ebp]
	mov	eax, DWORD PTR ?x@@3HA			; x
	lea	ecx, DWORD PTR [eax+edx-1]
	imul	edx, ecx, 56
	mov	eax, DWORD PTR ?y@@3HA			; y
	add	eax, DWORD PTR _jj$[ebp]
	cmp	DWORD PTR ?mas_rab@@3PAY0O@HA[edx+eax*4], 0
	je	SHORT $LN55@prov_rot
; Line 350
	xor	eax, eax
	jmp	$LN74@prov_rot
$LN55@prov_rot:
; Line 351
	jmp	SHORT $LN57@prov_rot
$LN56@prov_rot:
	jmp	SHORT $LN60@prov_rot
$LN59@prov_rot:
	mov	ecx, DWORD PTR ?y@@3HA			; y
	add	ecx, 1
	mov	DWORD PTR ?y@@3HA, ecx			; y
; Line 352
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN54@prov_rot
$LN53@prov_rot:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN54@prov_rot:
	cmp	DWORD PTR _i$[ebp], 4
	jge	SHORT $LN52@prov_rot
; Line 353
	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN51@prov_rot
$LN50@prov_rot:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN51@prov_rot:
	cmp	DWORD PTR _j$[ebp], 4
	jge	SHORT $LN49@prov_rot
; Line 354
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 4
	mov	edx, DWORD PTR _i$[ebp]
	shl	edx, 4
	mov	eax, DWORD PTR _j$[ebp]
	mov	esi, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR ?fig_b@@3PAY03HA[ecx+esi*4]
	mov	DWORD PTR ?fig_tec@@3PAY03HA[edx+eax*4], ecx
	jmp	SHORT $LN50@prov_rot
$LN49@prov_rot:
	jmp	SHORT $LN53@prov_rot
$LN52@prov_rot:
; Line 355
	mov	eax, 1
	jmp	$LN74@prov_rot
	jmp	$LN67@prov_rot
$LN62@prov_rot:
; Line 357
	cmp	DWORD PTR ?fig_t@@3HA, 1		; fig_t
	jne	$LN47@prov_rot
	mov	edx, DWORD PTR _new_fig_p$[ebp]
	and	edx, -2147483647			; 80000001H
	jns	SHORT $LN77@prov_rot
	dec	edx
	or	edx, -2					; fffffffeH
	inc	edx
$LN77@prov_rot:
	cmp	edx, 1
	jne	$LN47@prov_rot
; Line 358
	mov	DWORD PTR _ii$[ebp], 0
	jmp	SHORT $LN46@prov_rot
$LN45@prov_rot:
	mov	eax, DWORD PTR _ii$[ebp]
	add	eax, 1
	mov	DWORD PTR _ii$[ebp], eax
$LN46@prov_rot:
	cmp	DWORD PTR _ii$[ebp], 4
	jge	SHORT $LN44@prov_rot
; Line 359
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	edx, DWORD PTR _ii$[ebp]
	cmp	DWORD PTR ?fig_b@@3PAY03HA[ecx+edx*4], 0
	je	SHORT $LN43@prov_rot
	imul	eax, DWORD PTR ?x@@3HA, 56		; x
	mov	ecx, DWORD PTR ?y@@3HA			; y
	add	ecx, DWORD PTR _ii$[ebp]
	cmp	DWORD PTR ?mas_rab@@3PAY0O@HA[eax+ecx*4-8], 0
	je	SHORT $LN43@prov_rot
; Line 360
	jmp	SHORT $LN44@prov_rot
$LN43@prov_rot:
; Line 361
	jmp	SHORT $LN45@prov_rot
$LN44@prov_rot:
	mov	DWORD PTR _jj$[ebp], 0
	jmp	SHORT $LN42@prov_rot
$LN41@prov_rot:
	mov	edx, DWORD PTR _jj$[ebp]
	add	edx, 1
	mov	DWORD PTR _jj$[ebp], edx
$LN42@prov_rot:
	cmp	DWORD PTR _jj$[ebp], 4
	jge	SHORT $LN40@prov_rot
; Line 362
	mov	eax, 16					; 00000010H
	shl	eax, 0
	mov	ecx, DWORD PTR _jj$[ebp]
	cmp	DWORD PTR ?fig_b@@3PAY03HA[eax+ecx*4], 0
	je	SHORT $LN39@prov_rot
	imul	edx, DWORD PTR ?x@@3HA, 56		; x
	mov	eax, DWORD PTR ?y@@3HA			; y
	add	eax, DWORD PTR _jj$[ebp]
	cmp	DWORD PTR ?mas_rab@@3PAY0O@HA[edx+eax*4-12], 0
	je	SHORT $LN39@prov_rot
; Line 363
	jmp	SHORT $LN40@prov_rot
$LN39@prov_rot:
; Line 364
	jmp	SHORT $LN41@prov_rot
$LN40@prov_rot:
	cmp	DWORD PTR _ii$[ebp], 4
	jne	SHORT $LN38@prov_rot
; Line 365
	mov	ecx, DWORD PTR ?y@@3HA			; y
	sub	ecx, 1
	mov	DWORD PTR ?y@@3HA, ecx			; y
; Line 366
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN37@prov_rot
$LN36@prov_rot:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN37@prov_rot:
	cmp	DWORD PTR _i$[ebp], 4
	jge	SHORT $LN35@prov_rot
; Line 367
	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN34@prov_rot
$LN33@prov_rot:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN34@prov_rot:
	cmp	DWORD PTR _j$[ebp], 4
	jge	SHORT $LN32@prov_rot
; Line 368
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 4
	mov	edx, DWORD PTR _i$[ebp]
	shl	edx, 4
	mov	eax, DWORD PTR _j$[ebp]
	mov	esi, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR ?fig_b@@3PAY03HA[ecx+esi*4]
	mov	DWORD PTR ?fig_tec@@3PAY03HA[edx+eax*4], ecx
	jmp	SHORT $LN33@prov_rot
$LN32@prov_rot:
	jmp	SHORT $LN36@prov_rot
$LN35@prov_rot:
; Line 369
	mov	eax, 1
	jmp	$LN74@prov_rot
	jmp	SHORT $LN31@prov_rot
$LN38@prov_rot:
; Line 371
	cmp	DWORD PTR _jj$[ebp], 4
	jne	SHORT $LN30@prov_rot
; Line 372
	mov	edx, DWORD PTR ?y@@3HA			; y
	sub	edx, 2
	mov	DWORD PTR ?y@@3HA, edx			; y
; Line 373
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN29@prov_rot
$LN28@prov_rot:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN29@prov_rot:
	cmp	DWORD PTR _i$[ebp], 4
	jge	SHORT $LN27@prov_rot
; Line 374
	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN26@prov_rot
$LN25@prov_rot:
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx
$LN26@prov_rot:
	cmp	DWORD PTR _j$[ebp], 4
	jge	SHORT $LN24@prov_rot
; Line 375
	mov	edx, DWORD PTR _i$[ebp]
	shl	edx, 4
	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _j$[ebp]
	mov	esi, DWORD PTR _j$[ebp]
	mov	edx, DWORD PTR ?fig_b@@3PAY03HA[edx+esi*4]
	mov	DWORD PTR ?fig_tec@@3PAY03HA[eax+ecx*4], edx
	jmp	SHORT $LN25@prov_rot
$LN24@prov_rot:
	jmp	SHORT $LN28@prov_rot
$LN27@prov_rot:
; Line 376
	mov	eax, 1
	jmp	$LN74@prov_rot
; Line 378
	jmp	SHORT $LN31@prov_rot
$LN30@prov_rot:
; Line 379
	xor	eax, eax
	jmp	$LN74@prov_rot
$LN31@prov_rot:
	jmp	$LN67@prov_rot
$LN47@prov_rot:
; Line 381
	cmp	DWORD PTR _j$[ebp], 2
	jne	$LN21@prov_rot
; Line 382
	mov	DWORD PTR _ii$[ebp], 0
	jmp	SHORT $LN20@prov_rot
$LN19@prov_rot:
	mov	eax, DWORD PTR _ii$[ebp]
	add	eax, 1
	mov	DWORD PTR _ii$[ebp], eax
$LN20@prov_rot:
	cmp	DWORD PTR _ii$[ebp], 3
	jge	SHORT $LN18@prov_rot
; Line 383
	mov	DWORD PTR _jj$[ebp], 0
	jmp	SHORT $LN17@prov_rot
$LN16@prov_rot:
	mov	ecx, DWORD PTR _jj$[ebp]
	add	ecx, 1
	mov	DWORD PTR _jj$[ebp], ecx
$LN17@prov_rot:
	cmp	DWORD PTR _jj$[ebp], 3
	jge	SHORT $LN15@prov_rot
; Line 384
	mov	edx, DWORD PTR _ii$[ebp]
	shl	edx, 4
	mov	eax, DWORD PTR _jj$[ebp]
	cmp	DWORD PTR ?fig_b@@3PAY03HA[edx+eax*4], 0
	je	SHORT $LN14@prov_rot
	mov	ecx, DWORD PTR _ii$[ebp]
	mov	edx, DWORD PTR ?x@@3HA			; x
	lea	eax, DWORD PTR [edx+ecx-1]
	imul	ecx, eax, 56
	mov	edx, DWORD PTR ?y@@3HA			; y
	add	edx, DWORD PTR _jj$[ebp]
	cmp	DWORD PTR ?mas_rab@@3PAY0O@HA[ecx+edx*4-8], 0
	je	SHORT $LN14@prov_rot
; Line 385
	xor	eax, eax
	jmp	$LN74@prov_rot
$LN14@prov_rot:
; Line 386
	jmp	SHORT $LN16@prov_rot
$LN15@prov_rot:
	jmp	SHORT $LN19@prov_rot
$LN18@prov_rot:
	mov	eax, DWORD PTR ?y@@3HA			; y
	sub	eax, 1
	mov	DWORD PTR ?y@@3HA, eax			; y
; Line 387
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN13@prov_rot
$LN12@prov_rot:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN13@prov_rot:
	cmp	DWORD PTR _i$[ebp], 4
	jge	SHORT $LN11@prov_rot
; Line 388
	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN10@prov_rot
$LN9@prov_rot:
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
$LN10@prov_rot:
	cmp	DWORD PTR _j$[ebp], 4
	jge	SHORT $LN8@prov_rot
; Line 389
	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 4
	mov	edx, DWORD PTR _j$[ebp]
	mov	esi, DWORD PTR _j$[ebp]
	mov	eax, DWORD PTR ?fig_b@@3PAY03HA[eax+esi*4]
	mov	DWORD PTR ?fig_tec@@3PAY03HA[ecx+edx*4], eax
	jmp	SHORT $LN9@prov_rot
$LN8@prov_rot:
	jmp	SHORT $LN12@prov_rot
$LN11@prov_rot:
; Line 390
	mov	eax, 1
	jmp	SHORT $LN74@prov_rot
; Line 392
	jmp	SHORT $LN67@prov_rot
$LN21@prov_rot:
; Line 393
	xor	eax, eax
	jmp	SHORT $LN74@prov_rot
$LN67@prov_rot:
; Line 396
	jmp	$LN69@prov_rot
$LN68@prov_rot:
	jmp	$LN72@prov_rot
$LN71@prov_rot:
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN6@prov_rot
$LN5@prov_rot:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN6@prov_rot:
	cmp	DWORD PTR _i$[ebp], 4
	jge	SHORT $LN4@prov_rot
; Line 397
	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN3@prov_rot
$LN2@prov_rot:
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
$LN3@prov_rot:
	cmp	DWORD PTR _j$[ebp], 4
	jge	SHORT $LN1@prov_rot
; Line 398
	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 4
	mov	edx, DWORD PTR _j$[ebp]
	mov	esi, DWORD PTR _j$[ebp]
	mov	eax, DWORD PTR ?fig_b@@3PAY03HA[eax+esi*4]
	mov	DWORD PTR ?fig_tec@@3PAY03HA[ecx+edx*4], eax
	jmp	SHORT $LN2@prov_rot
$LN1@prov_rot:
	jmp	SHORT $LN5@prov_rot
$LN4@prov_rot:
; Line 399
	mov	eax, 1
$LN74@prov_rot:
; Line 400
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
?prov_rot@@YAHH@Z ENDP					; prov_rot
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_j$ = -8						; size = 4
_i$ = -4						; size = 4
_new_x$ = 8						; size = 4
_new_y$ = 12						; size = 4
?prov_krok@@YAHHH@Z PROC				; prov_krok
; File c:\cpp\tetrgdip\tetr.cpp
; Line 318
	push	ebp
	mov	ebp, esp
	sub	esp, 8
; Line 320
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN7@prov_krok
$LN6@prov_krok:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN7@prov_krok:
	cmp	DWORD PTR _i$[ebp], 4
	jge	SHORT $LN5@prov_krok
; Line 321
	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN4@prov_krok
$LN3@prov_krok:
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx
$LN4@prov_krok:
	cmp	DWORD PTR _j$[ebp], 4
	jge	SHORT $LN2@prov_krok
; Line 322
	mov	edx, DWORD PTR _i$[ebp]
	shl	edx, 4
	mov	eax, DWORD PTR _j$[ebp]
	cmp	DWORD PTR ?fig_tec@@3PAY03HA[edx+eax*4], 0
	je	SHORT $LN1@prov_krok
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _new_x$[ebp]
	lea	eax, DWORD PTR [edx+ecx-1]
	imul	ecx, eax, 56
	mov	edx, DWORD PTR _new_y$[ebp]
	add	edx, DWORD PTR _j$[ebp]
	cmp	DWORD PTR ?mas_rab@@3PAY0O@HA[ecx+edx*4-4], 0
	je	SHORT $LN1@prov_krok
	xor	eax, eax
	jmp	SHORT $LN8@prov_krok
$LN1@prov_krok:
; Line 323
	jmp	SHORT $LN3@prov_krok
$LN2@prov_krok:
	jmp	SHORT $LN6@prov_krok
$LN5@prov_krok:
	mov	eax, 1
$LN8@prov_krok:
; Line 324
	mov	esp, ebp
	pop	ebp
	ret	0
?prov_krok@@YAHHH@Z ENDP				; prov_krok
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_brbr$ = -28						; size = 4
_ff$ = -24						; size = 4
tv135 = -20						; size = 4
_ii$ = -16						; size = 4
_jj$ = -12						; size = 4
_j$ = -8						; size = 4
_i$ = -4						; size = 4
?prov_lin@@YAHXZ PROC					; prov_lin
; File c:\cpp\tetrgdip\tetr.cpp
; Line 267
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	push	esi
; Line 268
	mov	DWORD PTR ?f_sop@@3HA, 0		; f_sop
; Line 269
	mov	DWORD PTR _brbr$[ebp], 0
; Line 271
	mov	DWORD PTR _ff$[ebp], 0
; Line 272
	mov	DWORD PTR _i$[ebp], 1
	jmp	SHORT $LN34@prov_lin
$LN33@prov_lin:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN34@prov_lin:
	cmp	DWORD PTR _i$[ebp], 22			; 00000016H
	jg	$LN32@prov_lin
; Line 273
	mov	DWORD PTR _j$[ebp], 1
	jmp	SHORT $LN31@prov_lin
$LN30@prov_lin:
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx
$LN31@prov_lin:
	cmp	DWORD PTR _j$[ebp], 11			; 0000000bH
	jg	$LN29@prov_lin
; Line 274
	mov	edx, DWORD PTR _i$[ebp]
	mov	DWORD PTR ?sopli@@3PAHA[edx*4-4], 0
; Line 275
	imul	eax, DWORD PTR _i$[ebp], 56
	mov	ecx, DWORD PTR _j$[ebp]
	cmp	DWORD PTR ?mas_rab@@3PAY0O@HA[eax+ecx*4], 0
	jne	SHORT $LN28@prov_lin
	jmp	$LN29@prov_lin
$LN28@prov_lin:
; Line 276
	cmp	DWORD PTR _j$[ebp], 11			; 0000000bH
	jne	$LN27@prov_lin
; Line 277
	mov	edx, 22					; 00000016H
	sub	edx, DWORD PTR _j$[ebp]
	mov	eax, DWORD PTR ?total@@3HA		; total
	lea	ecx, DWORD PTR [eax+edx+1]
	mov	DWORD PTR ?total@@3HA, ecx		; total
; Line 278
	mov	edx, DWORD PTR _brbr$[ebp]
	add	edx, 1
	mov	DWORD PTR _brbr$[ebp], edx
; Line 279
	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR ?sopli@@3PAHA[eax*4-4], 1
; Line 280
	mov	DWORD PTR ?f_sop@@3HA, 1		; f_sop
; Line 281
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR _ii$[ebp], ecx
	jmp	SHORT $LN26@prov_lin
$LN25@prov_lin:
	mov	edx, DWORD PTR _ii$[ebp]
	sub	edx, 1
	mov	DWORD PTR _ii$[ebp], edx
$LN26@prov_lin:
	cmp	DWORD PTR _ii$[ebp], 1
	jle	SHORT $LN24@prov_lin
; Line 282
	mov	DWORD PTR _jj$[ebp], 1
	jmp	SHORT $LN23@prov_lin
$LN22@prov_lin:
	mov	eax, DWORD PTR _jj$[ebp]
	add	eax, 1
	mov	DWORD PTR _jj$[ebp], eax
$LN23@prov_lin:
	cmp	DWORD PTR _jj$[ebp], 12			; 0000000cH
	jge	SHORT $LN21@prov_lin
	mov	ecx, DWORD PTR _ii$[ebp]
	sub	ecx, 1
	imul	edx, ecx, 56
	imul	eax, DWORD PTR _ii$[ebp], 56
	mov	ecx, DWORD PTR _jj$[ebp]
	mov	esi, DWORD PTR _jj$[ebp]
	mov	edx, DWORD PTR ?mas_rab@@3PAY0O@HA[edx+esi*4]
	mov	DWORD PTR ?mas_rab@@3PAY0O@HA[eax+ecx*4], edx
	jmp	SHORT $LN22@prov_lin
$LN21@prov_lin:
	jmp	SHORT $LN25@prov_lin
$LN24@prov_lin:
; Line 283
	mov	DWORD PTR _jj$[ebp], 1
	jmp	SHORT $LN20@prov_lin
$LN19@prov_lin:
	mov	eax, DWORD PTR _jj$[ebp]
	add	eax, 1
	mov	DWORD PTR _jj$[ebp], eax
$LN20@prov_lin:
	cmp	DWORD PTR _jj$[ebp], 12			; 0000000cH
	jge	SHORT $LN27@prov_lin
	mov	ecx, 56					; 00000038H
	shl	ecx, 0
	mov	edx, DWORD PTR _jj$[ebp]
	mov	DWORD PTR ?mas_rab@@3PAY0O@HA[ecx+edx*4], 0
	jmp	SHORT $LN19@prov_lin
$LN27@prov_lin:
; Line 285
	jmp	$LN30@prov_lin
$LN29@prov_lin:
	jmp	$LN33@prov_lin
$LN32@prov_lin:
; Line 286
	mov	eax, DWORD PTR _brbr$[ebp]
	mov	DWORD PTR tv135[ebp], eax
	mov	ecx, DWORD PTR tv135[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv135[ebp], ecx
	cmp	DWORD PTR tv135[ebp], 3
	ja	SHORT $LN16@prov_lin
	mov	edx, DWORD PTR tv135[ebp]
	jmp	DWORD PTR $LN37@prov_lin[edx*4]
; Line 288
	jmp	SHORT $LN16@prov_lin
$LN14@prov_lin:
; Line 290
	mov	eax, DWORD PTR ?total@@3HA		; total
	add	eax, 10					; 0000000aH
	mov	DWORD PTR ?total@@3HA, eax		; total
; Line 291
	jmp	SHORT $LN16@prov_lin
$LN13@prov_lin:
; Line 293
	mov	ecx, DWORD PTR ?total@@3HA		; total
	add	ecx, 20					; 00000014H
	mov	DWORD PTR ?total@@3HA, ecx		; total
; Line 294
	jmp	SHORT $LN16@prov_lin
$LN12@prov_lin:
; Line 296
	mov	edx, DWORD PTR ?total@@3HA		; total
	add	edx, 40					; 00000028H
	mov	DWORD PTR ?total@@3HA, edx		; total
; Line 297
	jmp	SHORT $LN16@prov_lin
$LN11@prov_lin:
; Line 299
	mov	eax, DWORD PTR ?total@@3HA		; total
	add	eax, 100				; 00000064H
	mov	DWORD PTR ?total@@3HA, eax		; total
$LN16@prov_lin:
; Line 304
	mov	DWORD PTR _j$[ebp], 1
	jmp	SHORT $LN9@prov_lin
$LN8@prov_lin:
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx
$LN9@prov_lin:
	cmp	DWORD PTR _j$[ebp], 11			; 0000000bH
	jg	SHORT $LN7@prov_lin
; Line 305
	mov	DWORD PTR _ff$[ebp], 1
; Line 306
	mov	DWORD PTR _i$[ebp], 22			; 00000016H
	jmp	SHORT $LN6@prov_lin
$LN5@prov_lin:
	mov	edx, DWORD PTR _i$[ebp]
	sub	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN6@prov_lin:
	cmp	DWORD PTR _i$[ebp], 1
	jle	SHORT $LN4@prov_lin
; Line 307
	cmp	DWORD PTR _ff$[ebp], 0
	je	SHORT $LN3@prov_lin
	imul	eax, DWORD PTR _i$[ebp], 56
	mov	ecx, DWORD PTR _j$[ebp]
	cmp	DWORD PTR ?mas_rab@@3PAY0O@HA[eax+ecx*4], 0
	jne	SHORT $LN3@prov_lin
; Line 308
	mov	DWORD PTR _ff$[ebp], 0
	jmp	SHORT $LN2@prov_lin
$LN3@prov_lin:
; Line 309
	cmp	DWORD PTR _ff$[ebp], 0
	jne	SHORT $LN2@prov_lin
	imul	edx, DWORD PTR _i$[ebp], 56
	mov	eax, DWORD PTR _j$[ebp]
	cmp	DWORD PTR ?mas_rab@@3PAY0O@HA[edx+eax*4], 0
	je	SHORT $LN2@prov_lin
; Line 310
	xor	eax, eax
	jmp	SHORT $LN35@prov_lin
$LN2@prov_lin:
; Line 311
	jmp	SHORT $LN5@prov_lin
$LN4@prov_lin:
; Line 312
	jmp	SHORT $LN8@prov_lin
$LN7@prov_lin:
; Line 313
	mov	eax, 1
$LN35@prov_lin:
; Line 314
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN37@prov_lin:
	DD	$LN14@prov_lin
	DD	$LN13@prov_lin
	DD	$LN12@prov_lin
	DD	$LN11@prov_lin
?prov_lin@@YAHXZ ENDP					; prov_lin
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_j$ = -8						; size = 4
_i$ = -4						; size = 4
_n_fig_p$ = 8						; size = 4
?rot@@YAXH@Z PROC					; rot
; File c:\cpp\tetrgdip\tetr.cpp
; Line 82
	push	ebp
	mov	ebp, esp
	sub	esp, 8
; Line 84
	cmp	DWORD PTR ?fig_t@@3HA, 2		; fig_t
	jge	$LN32@rot
; Line 85
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN31@rot
$LN30@rot:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN31@rot:
	cmp	DWORD PTR _i$[ebp], 4
	jge	$LN29@rot
; Line 86
	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN28@rot
$LN27@rot:
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx
$LN28@rot:
	cmp	DWORD PTR _j$[ebp], 4
	jge	$LN26@rot
; Line 87
	mov	edx, DWORD PTR _n_fig_p$[ebp]
	and	edx, -2147483647			; 80000001H
	jns	SHORT $LN35@rot
	dec	edx
	or	edx, -2					; fffffffeH
	inc	edx
$LN35@rot:
	test	edx, edx
	je	SHORT $LN25@rot
	mov	eax, DWORD PTR ?fig_t@@3HA		; fig_t
	shl	eax, 6
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 4
	lea	edx, DWORD PTR _f[eax+ecx]
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	imul	ecx, DWORD PTR ?fig_c@@3HA		; fig_c
	mov	edx, DWORD PTR _i$[ebp]
	shl	edx, 4
	mov	eax, DWORD PTR _j$[ebp]
	mov	DWORD PTR ?fig_b@@3PAY03HA[edx+eax*4], ecx
	jmp	SHORT $LN24@rot
$LN25@rot:
; Line 88
	mov	ecx, DWORD PTR ?fig_t@@3HA		; fig_t
	shl	ecx, 6
	mov	edx, DWORD PTR _j$[ebp]
	shl	edx, 4
	lea	eax, DWORD PTR _f[ecx+edx]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	imul	edx, DWORD PTR ?fig_c@@3HA		; fig_c
	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _j$[ebp]
	mov	DWORD PTR ?fig_b@@3PAY03HA[eax+ecx*4], edx
$LN24@rot:
; Line 89
	jmp	$LN27@rot
$LN26@rot:
	jmp	$LN30@rot
$LN29@rot:
	jmp	$LN33@rot
$LN32@rot:
; Line 91
	mov	edx, 16					; 00000010H
	shl	edx, 0
	mov	eax, 4
	imul	ecx, eax, 3
	mov	DWORD PTR ?fig_b@@3PAY03HA[edx+ecx], 0
; Line 92
	mov	edx, 16					; 00000010H
	imul	eax, edx, 3
	mov	ecx, 4
	shl	ecx, 0
	mov	DWORD PTR ?fig_b@@3PAY03HA[eax+ecx], 0
; Line 93
	cmp	DWORD PTR ?fig_t@@3HA, 5		; fig_t
	jge	$LN22@rot
; Line 94
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN21@rot
$LN20@rot:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN21@rot:
	cmp	DWORD PTR _i$[ebp], 3
	jge	$LN19@rot
; Line 95
	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN18@rot
$LN17@rot:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN18@rot:
	cmp	DWORD PTR _j$[ebp], 3
	jge	$LN16@rot
; Line 96
	mov	ecx, DWORD PTR _n_fig_p$[ebp]
	and	ecx, -2147483645			; 80000003H
	jns	SHORT $LN36@rot
	dec	ecx
	or	ecx, -4					; fffffffcH
	inc	ecx
$LN36@rot:
	test	ecx, ecx
	jne	SHORT $LN15@rot
	mov	edx, DWORD PTR ?fig_t@@3HA		; fig_t
	shl	edx, 6
	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	lea	ecx, DWORD PTR _f[edx+eax]
	mov	edx, DWORD PTR _j$[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	imul	eax, DWORD PTR ?fig_c@@3HA		; fig_c
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 4
	mov	edx, DWORD PTR _j$[ebp]
	mov	DWORD PTR ?fig_b@@3PAY03HA[ecx+edx*4], eax
	jmp	$LN14@rot
$LN15@rot:
; Line 97
	mov	eax, DWORD PTR _n_fig_p$[ebp]
	and	eax, -2147483645			; 80000003H
	jns	SHORT $LN37@rot
	dec	eax
	or	eax, -4					; fffffffcH
	inc	eax
$LN37@rot:
	cmp	eax, 1
	jne	SHORT $LN13@rot
	mov	ecx, DWORD PTR ?fig_t@@3HA		; fig_t
	shl	ecx, 6
	mov	edx, 2
	sub	edx, DWORD PTR _j$[ebp]
	shl	edx, 4
	lea	eax, DWORD PTR _f[ecx+edx]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	imul	edx, DWORD PTR ?fig_c@@3HA		; fig_c
	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _j$[ebp]
	mov	DWORD PTR ?fig_b@@3PAY03HA[eax+ecx*4], edx
	jmp	$LN14@rot
$LN13@rot:
; Line 98
	mov	edx, DWORD PTR _n_fig_p$[ebp]
	and	edx, -2147483645			; 80000003H
	jns	SHORT $LN38@rot
	dec	edx
	or	edx, -4					; fffffffcH
	inc	edx
$LN38@rot:
	cmp	edx, 2
	jne	SHORT $LN11@rot
	mov	eax, DWORD PTR ?fig_t@@3HA		; fig_t
	shl	eax, 6
	mov	ecx, 2
	sub	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 4
	lea	edx, DWORD PTR _f[eax+ecx]
	mov	eax, 2
	sub	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	imul	ecx, DWORD PTR ?fig_c@@3HA		; fig_c
	mov	edx, DWORD PTR _i$[ebp]
	shl	edx, 4
	mov	eax, DWORD PTR _j$[ebp]
	mov	DWORD PTR ?fig_b@@3PAY03HA[edx+eax*4], ecx
	jmp	SHORT $LN14@rot
$LN11@rot:
; Line 99
	mov	ecx, DWORD PTR ?fig_t@@3HA		; fig_t
	shl	ecx, 6
	mov	edx, DWORD PTR _j$[ebp]
	shl	edx, 4
	lea	eax, DWORD PTR _f[ecx+edx]
	mov	ecx, 2
	sub	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	imul	edx, DWORD PTR ?fig_c@@3HA		; fig_c
	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _j$[ebp]
	mov	DWORD PTR ?fig_b@@3PAY03HA[eax+ecx*4], edx
$LN14@rot:
; Line 100
	jmp	$LN17@rot
$LN16@rot:
	jmp	$LN20@rot
$LN19@rot:
	jmp	$LN33@rot
$LN22@rot:
; Line 102
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN8@rot
$LN7@rot:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN8@rot:
	cmp	DWORD PTR _i$[ebp], 3
	jge	$LN33@rot
; Line 103
	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN5@rot
$LN4@rot:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN5@rot:
	cmp	DWORD PTR _j$[ebp], 3
	jge	$LN3@rot
; Line 104
	mov	ecx, DWORD PTR _n_fig_p$[ebp]
	and	ecx, -2147483647			; 80000001H
	jns	SHORT $LN39@rot
	dec	ecx
	or	ecx, -2					; fffffffeH
	inc	ecx
$LN39@rot:
	test	ecx, ecx
	jne	SHORT $LN2@rot
	mov	edx, DWORD PTR ?fig_t@@3HA		; fig_t
	shl	edx, 6
	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	lea	ecx, DWORD PTR _f[edx+eax]
	mov	edx, DWORD PTR _j$[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	imul	eax, DWORD PTR ?fig_c@@3HA		; fig_c
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 4
	mov	edx, DWORD PTR _j$[ebp]
	mov	DWORD PTR ?fig_b@@3PAY03HA[ecx+edx*4], eax
	jmp	SHORT $LN1@rot
$LN2@rot:
; Line 105
	mov	eax, DWORD PTR ?fig_t@@3HA		; fig_t
	shl	eax, 6
	mov	ecx, 2
	sub	ecx, DWORD PTR _j$[ebp]
	shl	ecx, 4
	lea	edx, DWORD PTR _f[eax+ecx]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	imul	ecx, DWORD PTR ?fig_c@@3HA		; fig_c
	mov	edx, DWORD PTR _i$[ebp]
	shl	edx, 4
	mov	eax, DWORD PTR _j$[ebp]
	mov	DWORD PTR ?fig_b@@3PAY03HA[edx+eax*4], ecx
$LN1@rot:
; Line 106
	jmp	$LN4@rot
$LN3@rot:
	jmp	$LN7@rot
$LN33@rot:
; Line 108
	mov	esp, ebp
	pop	ebp
	ret	0
?rot@@YAXH@Z ENDP					; rot
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
?setup_3@@YAXXZ PROC					; setup_3
; File c:\cpp\tetrgdip\tetr.cpp
; Line 259
	push	ebp
	mov	ebp, esp
; Line 260
	push	1
	call	?prnt_podg@@YAXH@Z			; prnt_podg
	add	esp, 4
; Line 261
	mov	DWORD PTR ?pause@@3HA, 0		; pause
; Line 262
	mov	DWORD PTR ?etap@@3HA, 4			; etap
; Line 263
	pop	ebp
	ret	0
?setup_3@@YAXXZ ENDP					; setup_3
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_scan$ = 8						; size = 4
?setup_2@@YAXH@Z PROC					; setup_2
; File c:\cpp\tetrgdip\tetr.cpp
; Line 236
	push	ebp
	mov	ebp, esp
; Line 237
	cmp	DWORD PTR _scan$[ebp], 0
	je	SHORT $LN7@setup_2
; Line 238
	cmp	DWORD PTR _scan$[ebp], 1
	jne	SHORT $LN6@setup_2
; Line 239
	cmp	DWORD PTR ?vaj@@3HA, 18			; vaj, 00000012H
	jge	SHORT $LN5@setup_2
; Line 240
	mov	eax, DWORD PTR ?vaj@@3HA		; vaj
	add	eax, 1
	mov	DWORD PTR ?vaj@@3HA, eax		; vaj
$LN5@setup_2:
; Line 242
	jmp	SHORT $LN7@setup_2
$LN6@setup_2:
; Line 243
	cmp	DWORD PTR _scan$[ebp], 3
	jne	SHORT $LN3@setup_2
; Line 244
	cmp	DWORD PTR ?vaj@@3HA, 0			; vaj
	jle	SHORT $LN2@setup_2
; Line 245
	mov	ecx, DWORD PTR ?vaj@@3HA		; vaj
	sub	ecx, 1
	mov	DWORD PTR ?vaj@@3HA, ecx		; vaj
$LN2@setup_2:
; Line 248
	jmp	SHORT $LN7@setup_2
$LN3@setup_2:
; Line 249
	mov	DWORD PTR ?etap@@3HA, 3			; etap
; Line 250
	mov	DWORD PTR ?ready@@3HA, 4		; ready
$LN7@setup_2:
; Line 253
	call	?gen_vaj@@YAXXZ				; gen_vaj
; Line 254
	push	0
	call	?prnt_podg@@YAXH@Z			; prnt_podg
	add	esp, 4
; Line 255
	pop	ebp
	ret	0
?setup_2@@YAXH@Z ENDP					; setup_2
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_j$ = -8						; size = 4
_i$ = -4						; size = 4
_no_adv$ = 8						; size = 4
?setup_1@@YAXH@Z PROC					; setup_1
; File c:\cpp\tetrgdip\tetr.cpp
; Line 197
	push	ebp
	mov	ebp, esp
	sub	esp, 8
; Line 199
	mov	DWORD PTR ?vaj@@3HA, 0			; vaj
; Line 200
	mov	DWORD PTR ?vaj_mem@@3HA, 0		; vaj_mem
; Line 201
	cmp	DWORD PTR _no_adv$[ebp], 0
	jne	SHORT $LN24@setup_1
	cmp	DWORD PTR ?vaj_mem_2@@3HA, 1		; vaj_mem_2
	jne	SHORT $LN25@setup_1
$LN24@setup_1:
; Line 202
	push	0
	call	?gen@@YAXH@Z				; gen
	add	esp, 4
; Line 203
	mov	DWORD PTR ?total@@3HA, 0		; total
$LN25@setup_1:
; Line 205
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN23@setup_1
$LN22@setup_1:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN23@setup_1:
	cmp	DWORD PTR _i$[ebp], 25			; 00000019H
	jge	SHORT $LN21@setup_1
; Line 206
	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN20@setup_1
$LN19@setup_1:
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx
$LN20@setup_1:
	cmp	DWORD PTR _j$[ebp], 14			; 0000000eH
	jge	SHORT $LN18@setup_1
; Line 207
	cmp	DWORD PTR _i$[ebp], 0
	je	SHORT $LN16@setup_1
	cmp	DWORD PTR _j$[ebp], 0
	je	SHORT $LN16@setup_1
	cmp	DWORD PTR _i$[ebp], 23			; 00000017H
	je	SHORT $LN16@setup_1
	cmp	DWORD PTR _j$[ebp], 12			; 0000000cH
	je	SHORT $LN16@setup_1
	cmp	DWORD PTR _i$[ebp], 24			; 00000018H
	je	SHORT $LN16@setup_1
	cmp	DWORD PTR _j$[ebp], 13			; 0000000dH
	jne	SHORT $LN17@setup_1
$LN16@setup_1:
	imul	edx, DWORD PTR _i$[ebp], 56
	mov	eax, DWORD PTR _j$[ebp]
	mov	DWORD PTR ?mas_rab@@3PAY0O@HA[edx+eax*4], 1
	jmp	SHORT $LN15@setup_1
$LN17@setup_1:
; Line 208
	imul	ecx, DWORD PTR _i$[ebp], 56
	mov	edx, DWORD PTR _j$[ebp]
	mov	DWORD PTR ?mas_rab@@3PAY0O@HA[ecx+edx*4], 0
$LN15@setup_1:
; Line 209
	jmp	SHORT $LN19@setup_1
$LN18@setup_1:
	jmp	SHORT $LN22@setup_1
$LN21@setup_1:
; Line 210
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN14@setup_1
$LN13@setup_1:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN14@setup_1:
	cmp	DWORD PTR _i$[ebp], 4
	jge	SHORT $LN12@setup_1
; Line 211
	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN11@setup_1
$LN10@setup_1:
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx
$LN11@setup_1:
	cmp	DWORD PTR _j$[ebp], 4
	jge	SHORT $LN9@setup_1
; Line 212
	mov	edx, DWORD PTR _i$[ebp]
	shl	edx, 4
	mov	eax, DWORD PTR _j$[ebp]
	mov	DWORD PTR ?fig_tec@@3PAY03HA[edx+eax*4], 0
	jmp	SHORT $LN10@setup_1
$LN9@setup_1:
	jmp	SHORT $LN13@setup_1
$LN12@setup_1:
; Line 213
	cmp	DWORD PTR _no_adv$[ebp], 0
	jne	SHORT $LN8@setup_1
	cmp	DWORD PTR ?vaj_mem_2@@3HA, 18		; vaj_mem_2, 00000012H
	je	SHORT $LN8@setup_1
; Line 214
	mov	ecx, DWORD PTR ?vaj_mem_2@@3HA		; vaj_mem_2
	add	ecx, 1
	mov	DWORD PTR ?vaj_mem_2@@3HA, ecx		; vaj_mem_2
$LN8@setup_1:
; Line 215
	push	0
	call	?gen@@YAXH@Z				; gen
	add	esp, 4
; Line 216
	cmp	DWORD PTR ?vaj_mem_2@@3HA, 1		; vaj_mem_2
	jle	SHORT $LN7@setup_1
$LN6@setup_1:
; Line 217
	call	?gen_vaj@@YAXXZ				; gen_vaj
	call	?prov_lin@@YAHXZ			; prov_lin
	test	eax, eax
	jne	SHORT $LN6@setup_1
; Line 218
	jmp	SHORT $LN3@setup_1
$LN7@setup_1:
; Line 219
	call	?gen_vaj@@YAXXZ				; gen_vaj
$LN3@setup_1:
; Line 220
	mov	DWORD PTR ?fl_s@@3HA, 0			; fl_s
; Line 221
	cmp	DWORD PTR _no_adv$[ebp], 0
	je	SHORT $LN2@setup_1
; Line 222
	call	?gen_vaj@@YAXXZ				; gen_vaj
; Line 223
	push	0
	call	?prnt_podg@@YAXH@Z			; prnt_podg
	add	esp, 4
; Line 224
	mov	DWORD PTR ?etap@@3HA, 2			; etap
; Line 225
	jmp	SHORT $LN1@setup_1
$LN2@setup_1:
; Line 226
	mov	DWORD PTR ?etap@@3HA, 3			; etap
; Line 227
	mov	DWORD PTR ?ready@@3HA, 4		; ready
; Line 228
	push	0
	call	?prnt_podg@@YAXH@Z			; prnt_podg
	add	esp, 4
$LN1@setup_1:
; Line 230
	mov	DWORD PTR ?takt@@3KA, 1000		; takt, 000003e8H
; Line 231
	mov	DWORD PTR ?prsc@@3KA, 200		; prsc, 000000c8H
; Line 232
	mov	esp, ebp
	pop	ebp
	ret	0
?setup_1@@YAXH@Z ENDP					; setup_1
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv65 = -4						; size = 4
_no_adv$ = 8						; size = 4
?setup_0@@YAXH@Z PROC					; setup_0
; File c:\cpp\tetrgdip\tetr.cpp
; Line 190
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 191
	cmp	DWORD PTR _no_adv$[ebp], 1
	jne	SHORT $LN3@setup_0
	mov	eax, DWORD PTR ?vaj_mem_2@@3HA		; vaj_mem_2
	mov	DWORD PTR tv65[ebp], eax
	jmp	SHORT $LN4@setup_0
$LN3@setup_0:
	mov	DWORD PTR tv65[ebp], 1
$LN4@setup_0:
	mov	ecx, DWORD PTR tv65[ebp]
	mov	DWORD PTR ?vaj_mem_2@@3HA, ecx		; vaj_mem_2
; Line 192
	mov	DWORD PTR ?etap@@3HA, 1			; etap
; Line 193
	mov	esp, ebp
	pop	ebp
	ret	0
?setup_0@@YAXH@Z ENDP					; setup_0
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
?setup_00@@YAXXZ PROC					; setup_00
; File c:\cpp\tetrgdip\tetr.cpp
; Line 172
	push	ebp
	mov	ebp, esp
; Line 173
	mov	DWORD PTR ?max_total_norm@@3HA, 0	; max_total_norm
; Line 174
	mov	DWORD PTR ?max_total_adv@@3HA, 0	; max_total_adv
; Line 175
	mov	DWORD PTR ?pause@@3HA, 1		; pause
; Line 176
	push	0
	call	_time
	add	esp, 4
	push	eax
	call	_srand
	add	esp, 4
; Line 177
	push	0
	call	?gen@@YAXH@Z				; gen
	add	esp, 4
; Line 178
	mov	DWORD PTR ?fl_s@@3HA, 0			; fl_s
; Line 179
	mov	DWORD PTR ?f_sop@@3HA, 0		; f_sop
; Line 180
	mov	DWORD PTR ?f_sop_ver@@3HA, 0		; f_sop_ver
; Line 181
	mov	DWORD PTR ?takt@@3KA, 1000		; takt, 000003e8H
; Line 182
	mov	DWORD PTR ?etap@@3HA, 0			; etap
; Line 183
	mov	DWORD PTR ?ready@@3HA, 0		; ready
; Line 184
	mov	DWORD PTR ?f_next_level@@3HA, 0		; f_next_level
; Line 185
	call	_rand
	cdq
	mov	ecx, 10000				; 00002710H
	idiv	ecx
	mov	DWORD PTR ?hc@@3HA, edx			; hc
; Line 186
	pop	ebp
	ret	0
?setup_00@@YAXXZ ENDP					; setup_00
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
$T1 = -28						; size = 4
tv174 = -24						; size = 4
tv171 = -20						; size = 4
tv157 = -16						; size = 4
tv64 = -12						; size = 4
_j$2 = -8						; size = 4
_i$3 = -4						; size = 4
_no_adv$ = 8						; size = 4
_scan$ = 12						; size = 4
?loop@@YAHHH@Z PROC					; loop
; File c:\cpp\tetrgdip\tetr.cpp
; Line 416
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
; Line 417
	mov	eax, DWORD PTR _scan$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	mov	ecx, DWORD PTR tv64[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv64[ebp], ecx
	cmp	DWORD PTR tv64[ebp], 3
	ja	$LN32@loop
	mov	edx, DWORD PTR tv64[ebp]
	jmp	DWORD PTR $LN43@loop[edx*4]
$LN31@loop:
; Line 419
	mov	DWORD PTR ?fl_s@@3HA, 1			; fl_s
; Line 420
	jmp	$LN32@loop
$LN30@loop:
; Line 423
	mov	eax, DWORD PTR ?y@@3HA			; y
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR ?x@@3HA			; x
	push	ecx
	call	?prov_krok@@YAHHH@Z			; prov_krok
	add	esp, 8
	test	eax, eax
	je	SHORT $LN29@loop
; Line 424
	mov	edx, DWORD PTR ?y@@3HA			; y
	sub	edx, 1
	mov	DWORD PTR ?y@@3HA, edx			; y
; Line 425
	push	1
	call	?prnt_podg@@YAXH@Z			; prnt_podg
	add	esp, 4
$LN29@loop:
; Line 427
	jmp	SHORT $LN32@loop
$LN28@loop:
; Line 430
	mov	eax, DWORD PTR ?y@@3HA			; y
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR ?x@@3HA			; x
	push	ecx
	call	?prov_krok@@YAHHH@Z			; prov_krok
	add	esp, 8
	test	eax, eax
	je	SHORT $LN27@loop
; Line 431
	mov	edx, DWORD PTR ?y@@3HA			; y
	add	edx, 1
	mov	DWORD PTR ?y@@3HA, edx			; y
; Line 432
	push	1
	call	?prnt_podg@@YAXH@Z			; prnt_podg
	add	esp, 4
$LN27@loop:
; Line 434
	jmp	SHORT $LN32@loop
$LN26@loop:
; Line 437
	mov	eax, DWORD PTR ?fig_p@@3HA		; fig_p
	add	eax, 1
	push	eax
	call	?prov_rot@@YAHH@Z			; prov_rot
	add	esp, 4
	test	eax, eax
	je	SHORT $LN32@loop
; Line 438
	mov	ecx, DWORD PTR ?fig_p@@3HA		; fig_p
	add	ecx, 1
	and	ecx, -2147483645			; 80000003H
	jns	SHORT $LN42@loop
	dec	ecx
	or	ecx, -4					; fffffffcH
	inc	ecx
$LN42@loop:
	mov	DWORD PTR ?fig_p@@3HA, ecx		; fig_p
; Line 439
	push	1
	call	?prnt_podg@@YAXH@Z			; prnt_podg
	add	esp, 4
$LN32@loop:
; Line 448
	cmp	DWORD PTR _scan$[ebp], 0
	jne	$LN23@loop
; Line 450
	mov	edx, DWORD PTR ?y@@3HA			; y
	push	edx
	mov	eax, DWORD PTR ?x@@3HA			; x
	add	eax, 1
	push	eax
	call	?prov_krok@@YAHHH@Z			; prov_krok
	add	esp, 8
	test	eax, eax
	je	SHORT $LN22@loop
; Line 451
	mov	ecx, DWORD PTR ?x@@3HA			; x
	add	ecx, 1
	mov	DWORD PTR ?x@@3HA, ecx			; x
; Line 452
	push	1
	call	?prnt_podg@@YAXH@Z			; prnt_podg
	add	esp, 4
; Line 453
	jmp	$LN23@loop
$LN22@loop:
; Line 454
	mov	DWORD PTR _i$3[ebp], 0
	jmp	SHORT $LN20@loop
$LN19@loop:
	mov	edx, DWORD PTR _i$3[ebp]
	add	edx, 1
	mov	DWORD PTR _i$3[ebp], edx
$LN20@loop:
	cmp	DWORD PTR _i$3[ebp], 4
	jge	$LN18@loop
; Line 455
	mov	DWORD PTR _j$2[ebp], 0
	jmp	SHORT $LN17@loop
$LN16@loop:
	mov	eax, DWORD PTR _j$2[ebp]
	add	eax, 1
	mov	DWORD PTR _j$2[ebp], eax
$LN17@loop:
	cmp	DWORD PTR _j$2[ebp], 4
	jge	SHORT $LN15@loop
; Line 456
	mov	ecx, DWORD PTR _i$3[ebp]
	shl	ecx, 4
	mov	edx, DWORD PTR _j$2[ebp]
	cmp	DWORD PTR ?fig_tec@@3PAY03HA[ecx+edx*4], 0
	je	SHORT $LN36@loop
	mov	eax, DWORD PTR _i$3[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _j$2[ebp]
	mov	edx, DWORD PTR ?fig_tec@@3PAY03HA[eax+ecx*4]
	mov	DWORD PTR tv157[ebp], edx
	jmp	SHORT $LN37@loop
$LN36@loop:
	mov	eax, DWORD PTR _i$3[ebp]
	mov	ecx, DWORD PTR ?x@@3HA			; x
	lea	edx, DWORD PTR [ecx+eax-1]
	imul	eax, edx, 56
	mov	ecx, DWORD PTR ?y@@3HA			; y
	add	ecx, DWORD PTR _j$2[ebp]
	mov	edx, DWORD PTR ?mas_rab@@3PAY0O@HA[eax+ecx*4-4]
	mov	DWORD PTR tv157[ebp], edx
$LN37@loop:
	mov	eax, DWORD PTR _i$3[ebp]
	mov	ecx, DWORD PTR ?x@@3HA			; x
	lea	edx, DWORD PTR [ecx+eax-1]
	imul	eax, edx, 56
	mov	ecx, DWORD PTR ?y@@3HA			; y
	add	ecx, DWORD PTR _j$2[ebp]
	mov	edx, DWORD PTR tv157[ebp]
	mov	DWORD PTR ?mas_rab@@3PAY0O@HA[eax+ecx*4-4], edx
	jmp	SHORT $LN16@loop
$LN15@loop:
	jmp	$LN19@loop
$LN18@loop:
; Line 457
	call	?prov_lin@@YAHXZ			; prov_lin
	test	eax, eax
	je	SHORT $LN14@loop
	cmp	DWORD PTR _no_adv$[ebp], 0
	jne	SHORT $LN14@loop
; Line 458
	mov	DWORD PTR ?f_sop@@3HA, 0		; f_sop
; Line 459
	mov	DWORD PTR ?etap@@3HA, 1			; etap
; Line 460
	mov	DWORD PTR ?f_sop_ver@@3HA, 1		; f_sop_ver
; Line 461
	mov	DWORD PTR ?f_next_level@@3HA, 1		; f_next_level
; Line 462
	imul	eax, DWORD PTR ?vaj_mem_2@@3HA, 100	; vaj_mem_2
	add	eax, DWORD PTR ?total@@3HA		; total
	mov	DWORD PTR ?total@@3HA, eax		; total
; Line 463
	mov	eax, 1
	jmp	$LN34@loop
$LN14@loop:
; Line 465
	push	1
	call	?gen@@YAXH@Z				; gen
	add	esp, 4
; Line 466
	mov	ecx, DWORD PTR ?y@@3HA			; y
	push	ecx
	mov	edx, DWORD PTR ?x@@3HA			; x
	push	edx
	call	?prov_krok@@YAHHH@Z			; prov_krok
	add	esp, 8
	test	eax, eax
	jne	$LN13@loop
; Line 467
	push	1
	call	?prnt_podg@@YAXH@Z			; prnt_podg
	add	esp, 4
; Line 468
	mov	DWORD PTR ?f_sop_ver@@3HA, 1		; f_sop_ver
; Line 469
	cmp	DWORD PTR _no_adv$[ebp], 0
	jne	SHORT $LN12@loop
; Line 470
	mov	DWORD PTR ?vaj_mem_2@@3HA, 1		; vaj_mem_2
$LN12@loop:
; Line 471
	cmp	DWORD PTR _no_adv$[ebp], 1
	jne	SHORT $LN38@loop
	mov	eax, DWORD PTR ?max_total_norm@@3HA	; max_total_norm
	mov	DWORD PTR tv171[ebp], eax
	jmp	SHORT $LN39@loop
$LN38@loop:
	mov	ecx, DWORD PTR ?max_total_adv@@3HA	; max_total_adv
	mov	DWORD PTR tv171[ebp], ecx
$LN39@loop:
	mov	edx, DWORD PTR tv171[ebp]
	cmp	edx, DWORD PTR ?total@@3HA		; total
	jge	SHORT $LN11@loop
; Line 472
	cmp	DWORD PTR _no_adv$[ebp], 1
	jne	SHORT $LN40@loop
	mov	DWORD PTR tv174[ebp], OFFSET ?max_total_norm@@3HA ; max_total_norm
	jmp	SHORT $LN41@loop
$LN40@loop:
	mov	DWORD PTR tv174[ebp], OFFSET ?max_total_adv@@3HA ; max_total_adv
$LN41@loop:
	mov	eax, DWORD PTR tv174[ebp]
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR $T1[ebp]
	mov	edx, DWORD PTR ?total@@3HA		; total
	mov	DWORD PTR [ecx], edx
$LN11@loop:
; Line 473
	mov	DWORD PTR ?etap@@3HA, 0			; etap
; Line 474
	mov	DWORD PTR _i$3[ebp], 0
	jmp	SHORT $LN10@loop
$LN9@loop:
	mov	eax, DWORD PTR _i$3[ebp]
	add	eax, 1
	mov	DWORD PTR _i$3[ebp], eax
$LN10@loop:
	cmp	DWORD PTR _i$3[ebp], 25			; 00000019H
	jge	SHORT $LN8@loop
; Line 475
	mov	DWORD PTR _j$2[ebp], 0
	jmp	SHORT $LN7@loop
$LN6@loop:
	mov	ecx, DWORD PTR _j$2[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$2[ebp], ecx
$LN7@loop:
	cmp	DWORD PTR _j$2[ebp], 14			; 0000000eH
	jge	SHORT $LN5@loop
; Line 476
	cmp	DWORD PTR _i$3[ebp], 0
	je	SHORT $LN3@loop
	cmp	DWORD PTR _j$2[ebp], 0
	je	SHORT $LN3@loop
	cmp	DWORD PTR _i$3[ebp], 23			; 00000017H
	je	SHORT $LN3@loop
	cmp	DWORD PTR _j$2[ebp], 12			; 0000000cH
	je	SHORT $LN3@loop
	cmp	DWORD PTR _i$3[ebp], 24			; 00000018H
	je	SHORT $LN3@loop
	cmp	DWORD PTR _j$2[ebp], 13			; 0000000dH
	jne	SHORT $LN4@loop
$LN3@loop:
	imul	edx, DWORD PTR _i$3[ebp], 56
	mov	eax, DWORD PTR _j$2[ebp]
	mov	DWORD PTR ?mas_rab@@3PAY0O@HA[edx+eax*4], 1
	jmp	SHORT $LN2@loop
$LN4@loop:
; Line 477
	imul	ecx, DWORD PTR _i$3[ebp], 56
	mov	edx, DWORD PTR _j$2[ebp]
	mov	DWORD PTR ?mas_rab@@3PAY0O@HA[ecx+edx*4], 0
$LN2@loop:
; Line 478
	jmp	SHORT $LN6@loop
$LN5@loop:
	jmp	SHORT $LN9@loop
$LN8@loop:
; Line 479
	push	1
	call	?prnt_podg@@YAXH@Z			; prnt_podg
	add	esp, 4
; Line 480
	xor	eax, eax
	jmp	SHORT $LN34@loop
$LN13@loop:
; Line 482
	push	1
	call	?prnt_podg@@YAXH@Z			; prnt_podg
	add	esp, 4
; Line 483
	cmp	DWORD PTR ?fl_s@@3HA, 0			; fl_s
	je	SHORT $LN23@loop
; Line 484
	mov	DWORD PTR ?fl_s@@3HA, 0			; fl_s
$LN23@loop:
; Line 488
	mov	eax, 1
$LN34@loop:
; Line 489
	mov	esp, ebp
	pop	ebp
	ret	0
$LN43@loop:
	DD	$LN26@loop
	DD	$LN30@loop
	DD	$LN31@loop
	DD	$LN28@loop
?loop@@YAHHH@Z ENDP					; loop
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
__Time$ = 8						; size = 4
_time	PROC
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\time.inl
; Line 132
	push	ebp
	mov	ebp, esp
; Line 133
	mov	eax, DWORD PTR __Time$[ebp]
	push	eax
	call	__time64
	add	esp, 4
; Line 134
	pop	ebp
	ret	0
_time	ENDP
_TEXT	ENDS
END
